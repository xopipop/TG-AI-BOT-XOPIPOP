#!/usr/bin/env python3
"""
Telegram AI Bot - –£–º–Ω—ã–π –±–æ—Ç —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö AI –º–æ–¥–µ–ª–µ–π
–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∞–Ω–∞–ª–∏–∑ —Ç–µ–∫—Å—Ç–∞, –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤, –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å OCR
"""

import asyncio
import logging
import os
import json
import aiohttp
import aiofiles
import sys
import subprocess
import platform
import urllib.request
from pathlib import Path
from functools import lru_cache
from typing import Optional, Tuple, List
import re

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ —Ñ–∞–π–ª–∞ .env
try:
    from dotenv import load_dotenv
    load_dotenv()
except ImportError:
    pass  # python-dotenv –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è

# –£—Å–ª–æ–≤–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã —Å –ª–µ–Ω–∏–≤–æ–π –∑–∞–≥—Ä—É–∑–∫–æ–π
try:
    import pytesseract
    from PIL import Image
    TESSERACT_AVAILABLE = True
except ImportError:
    pytesseract = None
    Image = None
    TESSERACT_AVAILABLE = False

try:
    from PyPDF2 import PdfReader
    PDF_AVAILABLE = True
except ImportError:
    PdfReader = None
    PDF_AVAILABLE = False

try:
    from docx import Document
    DOCX_AVAILABLE = True
except ImportError:
    Document = None
    DOCX_AVAILABLE = False

from aiogram import Bot, Dispatcher, types
from aiogram.filters import CommandStart, Command
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from aiogram.utils.keyboard import ReplyKeyboardBuilder

# --- –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø ---
# –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
OPENROUTER_API_KEY = os.getenv("OPENROUTER_API_KEY")

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ç–æ–∫–µ–Ω–æ–≤
if not TELEGRAM_BOT_TOKEN:
    raise ValueError("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è TELEGRAM_BOT_TOKEN –≤ —Ñ–∞–π–ª–µ .env")

if not OPENROUTER_API_KEY:
    raise ValueError("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è OPENROUTER_API_KEY –≤ —Ñ–∞–π–ª–µ .env")

# --- –ö–û–ù–ï–¶ –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò ---

# Configure logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# Initialize bot and dispatcher
bot = Bot(token=TELEGRAM_BOT_TOKEN)
dp = Dispatcher()

# User preferences storage (in-memory, resets on restart)
user_prefs = {}

# –ò—Å—Ç–æ—Ä–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–ø–∞–º—è—Ç—å –¥–∏–∞–ª–æ–≥–∞)
user_chat_history = {}

# –ö—ç—à –¥–ª—è —Ñ–∞–π–ª–æ–≤ (LRU cache)
import weakref

# –ö—ç—à –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ 
_file_cache = {}

# –õ–∏–º–∏—Ç—ã —Ñ–∞–π–ª–æ–≤
MAX_FILE_SIZE_MB = 20
MAX_PDF_PAGES = 50
MAX_TEXT_LENGTH = 10000

# –õ–∏–º–∏—Ç—ã –ø–∞–º—è—Ç–∏ –¥–∏–∞–ª–æ–≥–∞
MAX_CHAT_HISTORY = 20  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –∏—Å—Ç–æ—Ä–∏–∏
MAX_CONTEXT_TOKENS = 8000  # –ü—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω—ã–π –ª–∏–º–∏—Ç —Ç–æ–∫–µ–Ω–æ–≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞

# –î–æ—Å—Ç—É–ø–Ω—ã–µ AI –º–æ–¥–µ–ª–∏
AVAILABLE_MODELS = {
    "auto": "ü§ñ –ê–≤—Ç–æ (—É–º–Ω—ã–π –≤—ã–±–æ—Ä)",
    "openai/gpt-oss-120b": "üÜï GPT-OSS-120B",
    "openai/gpt-oss-20b": "üîπ GPT-OSS-20B",
    "deepseek/deepseek-r1-0528:free": "üß† DeepSeek R1 (–±–µ—Å–ø–ª–∞—Ç–Ω–æ)",
    "qwen/qwen3-235b-a22b:free": "üöÄ Qwen3-235B (–±–µ—Å–ø–ª–∞—Ç–Ω–æ)",
    "qwen/qwen-2.5-coder-32b-instruct:free": "üíª Qwen Coder (–±–µ—Å–ø–ª–∞—Ç–Ω–æ)",
    "moonshotai/kimi-k2": "üåô Kimi K2",
    "anthropic/claude-sonnet-4": "üìñ Claude Sonnet 4",
    "google/gemini-2.5-pro": "üíé Gemini 2.5 Pro"
}

# –ú–æ–¥–µ–ª–∏ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π (–º—É–ª—å—Ç–∏–º–æ–¥–∞–ª—å–Ω—ã–µ)
VISION_MODELS = {
    "google/gemini-2.5-pro",
    "anthropic/claude-sonnet-4",
    "openai/gpt-oss-120b",
    "moonshotai/kimi-k2"
}

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
DOWNLOADS_DIR = Path("downloads")
TESSERACT_DIR = Path("tesseract")
CONFIG_DIR = Path("config")

# –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫–∏
DOWNLOADS_DIR.mkdir(exist_ok=True)
TESSERACT_DIR.mkdir(exist_ok=True)
CONFIG_DIR.mkdir(exist_ok=True)

# –ö—ç—à –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ Tesseract
_tesseract_cache = None

def get_main_keyboard():
    """–°–æ–∑–¥–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏"""
    builder = ReplyKeyboardBuilder()
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
    builder.row(
        KeyboardButton(text="ü§ñ –í—ã–±–æ—Ä –º–æ–¥–µ–ª–∏"),
        KeyboardButton(text="üìä –°—Ç–∞—Ç—É—Å")
    )
    builder.row(
        KeyboardButton(text="üí≠ –ü–∞–º—è—Ç—å –¥–∏–∞–ª–æ–≥–∞"),
        KeyboardButton(text="‚ÑπÔ∏è –ü–æ–º–æ—â—å")
    )
    builder.row(
        KeyboardButton(text="üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å —á–∞—Ç")
    )
    
    return builder.as_markup(resize_keyboard=True, one_time_keyboard=False)

def get_model_keyboard():
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏"""
    builder = ReplyKeyboardBuilder()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –º–æ–¥–µ–ª–∏
    for model_id, model_name in AVAILABLE_MODELS.items():
        builder.row(KeyboardButton(text=model_name))
    
    builder.row(KeyboardButton(text="üîô –ù–∞–∑–∞–¥"))
    
    return builder.as_markup(resize_keyboard=True, one_time_keyboard=False)





def add_to_chat_history(user_id: int, role: str, content: str):
    """–î–æ–±–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if user_id not in user_chat_history:
        user_chat_history[user_id] = []
    
    user_chat_history[user_id].append({
        "role": role,
        "content": content,
        "timestamp": asyncio.get_event_loop().time()
    })
    
    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –∏—Å—Ç–æ—Ä–∏–∏
    if len(user_chat_history[user_id]) > MAX_CHAT_HISTORY:
        user_chat_history[user_id] = user_chat_history[user_id][-MAX_CHAT_HISTORY:]

def get_chat_context(user_id: int, include_system: bool = True) -> list:
    """–ü–æ–ª—É—á–∞–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç —á–∞—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ OpenAI API"""
    messages = []
    
    if include_system:
        messages.append({
            "role": "system",
            "content": """–û—Ç–≤–µ—á–∞–π –∫–æ—Ä–æ—Ç–∫–æ –∏ –ª–∞–∫–æ–Ω–∏—á–Ω–æ, –∫–∞–∫ —ç—Ç–æ –ø—Ä–∏–Ω—è—Ç–æ –≤ —á–∞—Ç–∞—Ö, –∏—Å–ø–æ–ª—å–∑—É–π —ç–º–æ–¥–∂–∏ –≥–¥–µ —ç—Ç–æ —É–º–µ—Å—Ç–Ω–æ.
            –°—Ç—Ä–æ–≥–æ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–π —Ä–∞–∑–º–µ—Ç–∫—É Markdown!
            –¢—ã –ø–æ–ª–µ–∑–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –≤ Telegram. 
            –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –ø—Ä–∏—Å—ã–ª–∞—Ç—å —Ç–µ–∫—Å—Ç, –¥–æ–∫—É–º–µ–Ω—Ç—ã –∏–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.
            –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏—Å–ª–∞–ª —Ñ–∞–π–ª, —Ç—ã –ø–æ–ª—É—á–∏—à—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –µ–≥–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º.
            –ï—Å–ª–∏ —Ñ–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–µ–∫—Å—Ç, —Ç—ã –º–æ–∂–µ—à—å –µ–≥–æ –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∏ –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã.
            –ï—Å–ª–∏ —ç—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, —Ç—ã –º–æ–∂–µ—à—å –æ–ø–∏—Å–∞—Ç—å –µ–≥–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –µ—Å–ª–∏ –µ—Å—Ç—å OCR –¥–∞–Ω–Ω—ã–µ.
            –û—Ç–≤–µ—á–∞–π –∫–æ—Ä–æ—Ç–∫–æ –∏ —è—Å–Ω–æ, –∏—Å–ø–æ–ª—å–∑—É–π —ç–º–æ–¥–∑–∏ –≥–¥–µ —É–º–µ—Å—Ç–Ω–æ.
            
            –í–ê–ñ–ù–û: –¢—ã –≤–µ–¥–µ—à—å –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω—ã–π –¥–∏–∞–ª–æ–≥ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º. –ü–æ–º–Ω–∏ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –æ—Ç–≤–µ—á–∞–π –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞."""
        })
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if user_id in user_chat_history:
        for msg in user_chat_history[user_id]:
            messages.append({
                "role": msg["role"],
                "content": msg["content"]
            })
    
    return messages

def clear_chat_history(user_id: int):
    """–û—á–∏—â–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if user_id in user_chat_history:
        del user_chat_history[user_id]

def estimate_tokens(text: str) -> int:
    """–ü—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–∫–µ–Ω–æ–≤ –≤ —Ç–µ–∫—Å—Ç–µ"""
    # –ü—Ä–∏–º–µ—Ä–Ω–∞—è –æ—Ü–µ–Ω–∫–∞: 1 —Ç–æ–∫–µ–Ω ‚âà 4 —Å–∏–º–≤–æ–ª–∞ –¥–ª—è –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ, 6 –¥–ª—è —Ä—É—Å—Å–∫–æ–≥–æ
    return len(text) // 5

def trim_context_if_needed(messages: list) -> list:
    """–û–±—Ä–µ–∑–∞–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç –µ—Å–ª–∏ –æ–Ω —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π"""
    total_tokens = sum(estimate_tokens(msg["content"]) for msg in messages)
    
    if total_tokens <= MAX_CONTEXT_TOKENS:
        return messages
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ–±—Ä–µ–∑–∞–µ–º —Å—Ç–∞—Ä—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    system_msg = messages[0] if messages and messages[0]["role"] == "system" else None
    user_messages = messages[1:] if system_msg else messages
    
    # –û–±—Ä–µ–∑–∞–µ–º —Å—Ç–∞—Ä—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –æ—Å—Ç–∞–≤–ª—è—è –ø–æ—Å–ª–µ–¥–Ω–∏–µ
    while user_messages and estimate_tokens("".join(msg["content"] for msg in user_messages)) > MAX_CONTEXT_TOKENS - 500:
        user_messages.pop(0)
    
    result = []
    if system_msg:
        result.append(system_msg)
    result.extend(user_messages)
    
    return result

@lru_cache(maxsize=1)
def check_tesseract_installation() -> Tuple[bool, str]:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–∫—É Tesseract OCR —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
    global _tesseract_cache
    
    if _tesseract_cache is not None:
        return _tesseract_cache
    
    try:
        if not TESSERACT_AVAILABLE:
            _tesseract_cache = (False, "–ú–æ–¥—É–ª—å pytesseract –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            return _tesseract_cache
        
        # –ß–∏—Ç–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –ø—É—Ç—å
        config_file = CONFIG_DIR / 'tesseract_path.txt'
        possible_paths = []
        
        if config_file.exists():
            try:
                saved_path = config_file.read_text().strip()
                if saved_path and Path(saved_path).exists():
                    possible_paths.append(saved_path)
            except:
                pass
        
        # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –ø—É—Ç–∏
        standard_paths = [
            r"C:\Users\User-01\AppData\Local\Programs\Tesseract-OCR\tesseract.exe",
            r"C:\Program Files\PDF24\tesseract\tesseract.exe",
            r"C:\Program Files\Tesseract-OCR\tesseract.exe",
            r"C:\Program Files (x86)\Tesseract-OCR\tesseract.exe",
            r"C:\Tesseract-OCR\tesseract.exe",
            r"D:\Program Files\Tesseract-OCR\tesseract.exe",
            r"D:\Program Files (x86)\Tesseract-OCR\tesseract.exe",
            "tesseract"
        ]
        possible_paths.extend(standard_paths)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—É—Ç–∏
        for path in possible_paths:
            try:
                pytesseract.pytesseract.tesseract_cmd = path
                version = pytesseract.get_tesseract_version()
                logger.info(f"‚úÖ Tesseract –Ω–∞–π–¥–µ–Ω: {path} (–≤–µ—Ä—Å–∏—è {version})")
                _tesseract_cache = (True, f"Tesseract –Ω–∞–π–¥–µ–Ω: {version}")
                return _tesseract_cache
            except:
                continue
        
        # –ü–æ–∏—Å–∫ —á–µ—Ä–µ–∑ where/which
        try:
            result = subprocess.run(['where', 'tesseract'], capture_output=True, text=True, shell=True)
            if result.returncode == 0 and result.stdout.strip():
                tesseract_path = result.stdout.strip().split('\n')[0]
                pytesseract.pytesseract.tesseract_cmd = tesseract_path
                version = pytesseract.get_tesseract_version()
                logger.info(f"‚úÖ Tesseract –Ω–∞–π–¥–µ–Ω —á–µ—Ä–µ–∑ –ø–æ–∏—Å–∫: {tesseract_path} (–≤–µ—Ä—Å–∏—è {version})")
                _tesseract_cache = (True, f"Tesseract –Ω–∞–π–¥–µ–Ω: {version}")
                return _tesseract_cache
        except:
            pass
        
        _tesseract_cache = (False, "Tesseract –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ")
        return _tesseract_cache
    except Exception as e:
        _tesseract_cache = (False, f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ Tesseract: {e}")
        return _tesseract_cache

def setup_tesseract_auto():
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ Tesseract"""
    logger.info("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ Tesseract OCR...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å—Ç–∞–Ω–æ–≤–∫—É
    is_installed, message = check_tesseract_installation()
    
    if is_installed:
        logger.info(f"‚úÖ {message}")
        return True
    
    logger.warning(f"‚ö†Ô∏è {message}")
    
    # –ï—Å–ª–∏ Windows –∏ Tesseract –Ω–µ –Ω–∞–π–¥–µ–Ω
    if platform.system() == "Windows":
        logger.info("üí° –ü–æ–ø—ã—Ç–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Tesseract –¥–ª—è Windows...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤ –ø–∞–ø–∫–µ –ø—Ä–æ–µ–∫—Ç–∞
        local_tesseract = Path("tesseract/tesseract.exe")
        if local_tesseract.exists():
            try:
                pytesseract.pytesseract.tesseract_cmd = str(local_tesseract)
                version = pytesseract.get_tesseract_version()
                logger.info(f"‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ª–æ–∫–∞–ª—å–Ω—ã–π Tesseract: {version}")
                return True
            except:
                pass
        
        # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º —Å–∫–∞—á–∞—Ç—å
        logger.info("üì• –î–ª—è –ø–æ–ª–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ OCR —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å Tesseract")
        logger.info("üîó –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ —É—Å—Ç–∞–Ω–æ–≤–∫–µ:")
        logger.info("   1. –°–∫–∞—á–∞–π—Ç–µ —Å: https://github.com/UB-Mannheim/tesseract/wiki")
        logger.info("   2. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é –ø–∞–ø–∫—É")
        logger.info("   3. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞")
        
        return False
    else:
        logger.info("üí° –î–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ Tesseract –Ω–∞ Linux/macOS:")
        logger.info("   Linux: sudo apt-get install tesseract-ocr")
        logger.info("   macOS: brew install tesseract")
        return False

async def install_missing_packages() -> bool:
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –ø–∞–∫–µ—Ç—ã –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ"""
    missing_packages = []
    
    if not TESSERACT_AVAILABLE:
        missing_packages.extend(["Pillow", "pytesseract"])
    if not PDF_AVAILABLE:
        missing_packages.append("PyPDF2")
    if not DOCX_AVAILABLE:
        missing_packages.append("python-docx")
    
    if missing_packages:
        logger.info(f"üì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö –ø–∞–∫–µ—Ç–æ–≤: {', '.join(missing_packages)}")
        try:
            # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–∞–∫–µ—Ç–æ–≤
            process = await asyncio.create_subprocess_exec(
                sys.executable, "-m", "pip", "install", *missing_packages,
                stdout=asyncio.subprocess.PIPE,
                stderr=asyncio.subprocess.PIPE
            )
            stdout, stderr = await process.communicate()
            
            if process.returncode == 0:
                logger.info("‚úÖ –ü–∞–∫–µ—Ç—ã —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ")
                logger.info("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞ –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π")
                return True
            else:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–∞–∫–µ—Ç–æ–≤: {stderr.decode()}")
                return False
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–∞–∫–µ—Ç–æ–≤: {e}")
            return False
    
    return True

async def extract_text_from_image(image_path: str) -> str:
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ç–µ–∫—Å—Ç –∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –ø–æ–º–æ—â—å—é OCR —Å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π"""
    if not TESSERACT_AVAILABLE:
        return ("‚ùå –ú–æ–¥—É–ª–∏ PIL/pytesseract –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã.\n"
                "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∫–æ–º–∞–Ω–¥–æ–π: pip install Pillow pytesseract")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º Tesseract –æ–¥–∏–Ω —Ä–∞–∑
    tesseract_ok, message = check_tesseract_installation()
    if not tesseract_ok:
        return (f"üñºÔ∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ, –Ω–æ OCR –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.\n\n"
                f"‚ùå {message}\n\n"
                f"üí° –î–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è—Ö —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Tesseract:\n\n"
                f"ü™ü Windows: –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Ñ–∞–π–ª –£–°–¢–ê–ù–û–í–ö–ê.bat\n"
                f"üêß Linux: sudo apt-get install tesseract-ocr tesseract-ocr-rus\n"
                f"üçé macOS: brew install tesseract\n\n"
                f"üì± –ò–ª–∏ –æ–ø–∏—à–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–º, –∏ —è –ø–æ–º–æ–≥—É —Å –∞–Ω–∞–ª–∏–∑–æ–º!")
    
    try:
        # –û—Ç–∫—Ä—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        with Image.open(image_path) as image:
            # –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è OCR
            if image.mode != 'RGB':
                image = image.convert('RGB')
            
            # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —è–∑—ã–∫–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ –ø–æ—Ä—è–¥–∫–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
            languages = ['rus+eng', 'eng', None]
            
            for lang in languages:
                try:
                    text = await asyncio.get_event_loop().run_in_executor(
                        None, 
                        lambda: pytesseract.image_to_string(image, lang=lang) if lang else pytesseract.image_to_string(image)
                    )
                    
                    if text.strip():
                        lang_info = f"({lang})" if lang else "(default)"
                        logger.info(f"‚úÖ OCR —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω {lang_info}")
                        return text.strip()
                except Exception as e:
                    logger.debug(f"OCR –ø–æ–ø—ã—Ç–∫–∞ —Å —è–∑—ã–∫–æ–º {lang} –Ω–µ—É–¥–∞—á–Ω–∞: {e}")
                    continue
            
            return "‚ùì –¢–µ–∫—Å—Ç –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω"
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
        return f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}"

async def extract_text_from_pdf(pdf_path: str) -> str:
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ç–µ–∫—Å—Ç –∏–∑ PDF —Ñ–∞–π–ª–∞ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è–º–∏"""
    if not PDF_AVAILABLE:
        return "‚ùå –ú–æ–¥—É–ª—å PyPDF2 –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∫–æ–º–∞–Ω–¥–æ–π: pip install PyPDF2"
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
        cache_key = f"pdf_{Path(pdf_path).stat().st_mtime}_{Path(pdf_path).stat().st_size}"
        if cache_key in _file_cache:
            logger.debug("üìã –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –∫—ç—à –¥–ª—è PDF")
            return _file_cache[cache_key]
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º —á—Ç–µ–Ω–∏–µ PDF –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        def read_pdf():
            reader = PdfReader(pdf_path)
            total_pages = len(reader.pages)
            
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü
            max_pages = min(total_pages, MAX_PDF_PAGES)
            if total_pages > MAX_PDF_PAGES:
                logger.warning(f"‚ö†Ô∏è PDF —Å–æ–¥–µ—Ä–∂–∏—Ç {total_pages} —Å—Ç—Ä–∞–Ω–∏—Ü, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ {MAX_PDF_PAGES}")
            
            pages_text = []
            for page_num in range(max_pages):
                try:
                    page = reader.pages[page_num]
                    page_text = page.extract_text()
                    if page_text.strip():
                        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä —Ç–µ–∫—Å—Ç–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                        if len(page_text) > MAX_TEXT_LENGTH:
                            page_text = page_text[:MAX_TEXT_LENGTH] + "... [–æ–±—Ä–µ–∑–∞–Ω–æ]"
                        pages_text.append(f"--- –°—Ç—Ä–∞–Ω–∏—Ü–∞ {page_num + 1} ---\n{page_text}")
                except Exception as page_error:
                    logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ —Ç–µ–∫—Å—Ç–∞ —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã {page_num + 1}: {page_error}")
                    pages_text.append(f"--- –°—Ç—Ä–∞–Ω–∏—Ü–∞ {page_num + 1} ---\n[–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞]")
            
            result = "\n\n".join(pages_text) if pages_text else "–¢–µ–∫—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ PDF"
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ —Å—Ç—Ä–∞–Ω–∏—Ü
            page_info = f"üìÑ PDF —Å–æ–¥–µ—Ä–∂–∏—Ç {total_pages} —Å—Ç—Ä–∞–Ω–∏—Ü"
            if total_pages > MAX_PDF_PAGES:
                page_info += f" (–æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –ø–µ—Ä–≤—ã—Ö {MAX_PDF_PAGES})"
            
            result = f"{page_info}\n\n{result}"
            
            # –û–±—â–µ–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            if len(result) > MAX_TEXT_LENGTH * 3:
                result = result[:MAX_TEXT_LENGTH * 3] + "\n\n... [—Ñ–∞–π–ª –æ–±—Ä–µ–∑–∞–Ω –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ –ø–∞–º—è—Ç–∏]"
            
            return result
        
        text = await asyncio.get_event_loop().run_in_executor(None, read_pdf)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
        _file_cache[cache_key] = text
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –∫—ç—à–∞
        if len(_file_cache) > 50:
            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏
            oldest_key = min(_file_cache.keys())
            del _file_cache[oldest_key]
        
        return text
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –∏–∑ PDF: {e}")
        return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ —Ç–µ–∫—Å—Ç–∞ –∏–∑ PDF: {e}"

async def extract_text_from_docx(docx_path: str) -> str:
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ç–µ–∫—Å—Ç –∏–∑ DOCX —Ñ–∞–π–ª–∞ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ"""
    if not DOCX_AVAILABLE:
        return "‚ùå –ú–æ–¥—É–ª—å python-docx –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∫–æ–º–∞–Ω–¥–æ–π: pip install python-docx"
    
    try:
        # –í—ã–ø–æ–ª–Ω—è–µ–º —á—Ç–µ–Ω–∏–µ DOCX –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        def read_docx():
            doc = Document(docx_path)
            paragraphs = [p.text for p in doc.paragraphs if p.text.strip()]
            text = "\n".join(paragraphs) if paragraphs else "–¢–µ–∫—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ DOCX"
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ–∫—É–º–µ–Ω—Ç–µ
            total_paragraphs = len(paragraphs)
            doc_info = f"üìù DOCX —Å–æ–¥–µ—Ä–∂–∏—Ç {total_paragraphs} –∞–±–∑–∞—Ü–µ–≤\n\n"
            
            return doc_info + text
        
        text = await asyncio.get_event_loop().run_in_executor(None, read_docx)
        return text
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –∏–∑ DOCX: {e}")
        return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ —Ç–µ–∫—Å—Ç–∞ –∏–∑ DOCX: {e}"

async def extract_text_from_txt(txt_path: str) -> str:
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ç–µ–∫—Å—Ç –∏–∑ TXT —Ñ–∞–π–ª–∞ —Å –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º –∫–æ–¥–∏—Ä–æ–≤–∫–∏"""
    encodings = ['utf-8', 'cp1251', 'windows-1251', 'latin-1', 'ascii']
    
    for encoding in encodings:
        try:
            async with aiofiles.open(txt_path, 'r', encoding=encoding) as f:
                text = await f.read()
            if text.strip():
                # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ
                lines = text.strip().split('\n')
                file_info = f"üìÑ TXT —Ñ–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç {len(lines)} —Å—Ç—Ä–æ–∫\n\n"
                return file_info + text.strip()
            else:
                return "–§–∞–π–ª –ø—É—Å—Ç"
        except (UnicodeDecodeError, UnicodeError):
            continue
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ —Å –∫–æ–¥–∏—Ä–æ–≤–∫–æ–π {encoding}: {e}")
            continue
    
    return "–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ñ–∞–π–ª (–Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–∞—è –∫–æ–¥–∏—Ä–æ–≤–∫–∞)"

async def download_file(file_id: str, local_path: str) -> bool:
    """–°–∫–∞—á–∏–≤–∞–µ—Ç —Ñ–∞–π–ª –ø–æ file_id –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø–æ local_path —Å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π"""
    try:
        file = await bot.get_file(file_id)
        file_url = f"https://api.telegram.org/file/bot{TELEGRAM_BOT_TOKEN}/{file.file_path}"
        
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        Path(local_path).parent.mkdir(parents=True, exist_ok=True)
        
        # –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ —Å —Ç–∞–π–º–∞—É—Ç–æ–º –∏ —É–≤–µ–ª–∏—á–µ–Ω–Ω—ã–º —Ä–∞–∑–º–µ—Ä–æ–º —á–∞–Ω–∫–∞
        timeout = aiohttp.ClientTimeout(total=30)
        async with aiohttp.ClientSession(timeout=timeout) as session:
            async with session.get(file_url) as response:
                if response.status == 200:
                    async with aiofiles.open(local_path, mode="wb") as f:
                        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä —á–∞–Ω–∫–∞ –¥–ª—è –ª—É—á—à–µ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
                        async for chunk in response.content.iter_chunked(8192):
                            await f.write(chunk)
                    return True
                else:
                    logger.error(f"–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞: HTTP {response.status}")
                    return False
    except aiohttp.ClientError as e:
        logger.error(f"–°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞: {e}")
        return False
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞: {e}")
        return False

async def invoke_llm_api(user_content: str, user_id: int = None, selected_model: str = None) -> str:
    """–í—ã–∑—ã–≤–∞–µ—Ç OpenRouter API –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Ç–≤–µ—Ç"""
    if not OPENROUTER_API_KEY:
        return "–û—à–∏–±–∫–∞: –¢–æ–∫–µ–Ω OPENROUTER_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω"

    headers = {
        "Authorization": f"Bearer {OPENROUTER_API_KEY}",
        "Content-Type": "application/json",
        "HTTP-Referer": os.getenv("REFERER_URL", "http://localhost"),
        "X-Title": os.getenv("TITLE_NAME", "Telegram Bot")
    }

    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_settings = user_prefs.get(user_id, {})
    preferred_model = user_settings.get("preferred_model", "auto")
    
    # –ï—Å–ª–∏ –º–æ–¥–µ–ª—å –≤—ã–±—Ä–∞–Ω–∞ —è–≤–Ω–æ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ—ë
    if selected_model and selected_model in AVAILABLE_MODELS:
        preferred_model = selected_model

    # –°–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π –¥–ª—è –ø–æ–ø—ã—Ç–∫–∏
    if preferred_model == "auto":
        models_to_try = [
            "openai/gpt-oss-120b",
            "google/gemini-2.5-pro", 
            "anthropic/claude-sonnet-4",
            "deepseek/deepseek-r1-0528:free",
            "qwen/qwen3-235b-a22b:free",
            "qwen/qwen-2.5-coder-32b-instruct:free",
            "moonshotai/kimi-k2",
            "openai/gpt-oss-20b"
        ]
    else:
        # –ü—Ä–æ–±—É–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –º–æ–¥–µ–ª—å, –∑–∞—Ç–µ–º fallback
        models_to_try = [preferred_model] + [
            model for model in AVAILABLE_MODELS.keys() 
            if model != preferred_model and model != "auto"
        ]

    for model_index, model in enumerate(models_to_try):
        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã –∏ —Ç–æ–∫–µ–Ω–æ–≤
            temperature = user_settings.get("temperature", 0.7)
            max_tokens = user_settings.get("max_tokens", 1024)
            
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç —á–∞—Ç–∞ —Å –∏—Å—Ç–æ—Ä–∏–µ–π —Å–æ–æ–±—â–µ–Ω–∏–π
            messages = get_chat_context(user_id)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            messages.append({
                "role": "user",
                "content": user_content
            })
            
            # –û–±—Ä–µ–∑–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            messages = trim_context_if_needed(messages)
            
            body = {
                "model": model,
                "messages": messages,
                "stream": True,
                "max_tokens": max_tokens,
                "temperature": temperature
            }

            full_response = ""
            api_url = "https://openrouter.ai/api/v1/chat/completions"

            async with aiohttp.ClientSession() as session:
                async with session.post(api_url, headers=headers, json=body) as response:
                    if response.status == 200:
                        async for line in response.content:
                            line = line.decode("utf-8").strip()
                            if line.startswith("data: "):
                                data = line[6:]
                                if data == "[DONE]":
                                    break
                                try:
                                    chunk_data = json.loads(data)
                                    if chunk_data.get("choices") and chunk_data["choices"][0].get("delta"):
                                        content = chunk_data["choices"][0]["delta"].get("content")
                                        if content:
                                            full_response += content
                                except json.JSONDecodeError:
                                    logger.error(f"Error decoding JSON chunk: {data}")
                                except Exception as e:
                                    logger.error(f"Error processing chunk: {e}")
                        
                        if full_response:
                            logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç –º–æ–¥–µ–ª–∏: {model}")
                            
                            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∏—Å—Ç–æ—Ä–∏—é
                            if user_id:
                                add_to_chat_history(user_id, "user", user_content)
                                add_to_chat_history(user_id, "assistant", full_response)
                            
                            return full_response
                    
                    # –ï—Å–ª–∏ —Å—Ç–∞—Ç—É—Å –Ω–µ 200, –ø—Ä–æ–±—É–µ–º —Å–ª–µ–¥—É—é—â—É—é –º–æ–¥–µ–ª—å
                    error_text = await response.text()
                    logger.warning(f"‚ö†Ô∏è –ú–æ–¥–µ–ª—å {model} –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ (—Å—Ç–∞—Ç—É—Å {response.status}), –ø—Ä–æ–±—É–µ–º —Å–ª–µ–¥—É—é—â—É—é...")
                    
                    if model_index == len(models_to_try) - 1:  # –ü–æ—Å–ª–µ–¥–Ω—è—è –º–æ–¥–µ–ª—å
                        logger.error(f"‚ùå –í—Å–µ –º–æ–¥–µ–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã. –ü–æ—Å–ª–µ–¥–Ω—è—è –æ—à–∏–±–∫–∞: {response.status} - {error_text}")
                        return f"–ò–∑–≤–∏–Ω–∏—Ç–µ, –≤—Å–µ AI –º–æ–¥–µ–ª–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã. –û—à–∏–±–∫–∞: {response.status}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
                    
                    continue  # –ü—Ä–æ–±—É–µ–º —Å–ª–µ–¥—É—é—â—É—é –º–æ–¥–µ–ª—å

        except aiohttp.ClientError as e:
            logger.warning(f"‚ö†Ô∏è –°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞ –¥–ª—è –º–æ–¥–µ–ª–∏ {model}: {e}")
            if model_index == len(models_to_try) - 1:
                return f"–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º: {e}"
            continue
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –¥–ª—è –º–æ–¥–µ–ª–∏ {model}: {e}")
            if model_index == len(models_to_try) - 1:
                return f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}"
            continue

    return "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –Ω–∏ –æ—Ç –æ–¥–Ω–æ–π –º–æ–¥–µ–ª–∏."

async def analyze_image_with_vision_model(image_url: str, prompt: str, model: str, user_id: int) -> tuple[bool, str]:
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –º—É–ª—å—Ç–∏–º–æ–¥–∞–ª—å–Ω—É—é –º–æ–¥–µ–ª—å OpenRouter"""
    if not OPENROUTER_API_KEY:
        return False, "–û—à–∏–±–∫–∞: OPENROUTER_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω"

    headers = {
        "Authorization": f"Bearer {OPENROUTER_API_KEY}",
        "Content-Type": "application/json",
        "HTTP-Referer": os.getenv("REFERER_URL", "http://localhost"),
        "X-Title": os.getenv("TITLE_NAME", "Telegram Bot")
    }

    try:
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç —á–∞—Ç–∞
        messages = get_chat_context(user_id)
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
        messages.append({
            "role": "user",
            "content": [
                {"type": "text", "text": prompt},
                {"type": "image_url", "image_url": {"url": image_url}}
            ]
        })

        # –û–±—Ä–µ–∑–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        messages = trim_context_if_needed(messages)

        payload = {
            "model": model,
            "messages": messages,
            "max_tokens": 2048,
            "temperature": 0.3
        }

        api_url = "https://openrouter.ai/api/v1/chat/completions"

        async with aiohttp.ClientSession() as session:
            async with session.post(api_url, headers=headers, json=payload) as response:
                if response.status == 200:
                    result = await response.json()
                    if result.get("choices") and len(result["choices"]) > 0:
                        content = result["choices"][0]["message"]["content"]
                        logger.info(f"‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –º–æ–¥–µ–ª—å—é: {model}")
                        
                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
                        add_to_chat_history(user_id, "user", f"[–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ]: {prompt}")
                        add_to_chat_history(user_id, "assistant", content)
                        
                        return True, content
                    else:
                        return False, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∞–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"
                else:
                    error_text = await response.text()
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {response.status} - {error_text}")
                    return False, f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {response.status}"

    except aiohttp.ClientError as e:
        logger.error(f"‚ùå –°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
        return False, f"–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {e}"
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
        return False, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}"

async def enhanced_image_analysis(image_url: str, user_id: int, custom_prompt: str = None) -> str:
    """–£–ª—É—á—à–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —á–µ—Ä–µ–∑ Vision –º–æ–¥–µ–ª–∏ —Å fallback –∫ Tesseract"""
    user_settings = user_prefs.get(user_id, {})
    preferred_model = user_settings.get("preferred_model", "auto")
    
    # –ü—Ä–æ–º–ø—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    default_prompt = "–ü–æ–¥—Ä–æ–±–Ω–æ –æ–ø–∏—à–∏ —ç—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏ –∏–∑–≤–ª–µ–∫–∏ –≤–µ—Å—å –≤–∏–¥–∏–º—ã–π —Ç–µ–∫—Å—Ç. –ï—Å–ª–∏ —ç—Ç–æ –¥–æ–∫—É–º–µ–Ω—Ç –∏–ª–∏ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–µ–∫—Å—Ç, –≤–µ—Ä–Ω–∏ –µ–≥–æ –¥–æ—Å–ª–æ–≤–Ω–æ."
    prompt = custom_prompt or default_prompt
    
    # –í—ã–±–∏—Ä–∞–µ–º –º–æ–¥–µ–ª–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
    if preferred_model == "auto":
        # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –º—É–ª—å—Ç–∏–º–æ–¥–∞–ª—å–Ω—ã–º –º–æ–¥–µ–ª—è–º
        models_to_try = [
            "google/gemini-2.5-pro",
            "anthropic/claude-sonnet-4", 
            "openai/gpt-oss-120b",
            "moonshotai/kimi-k2"
        ]
    else:
        if preferred_model in VISION_MODELS:
            models_to_try = [preferred_model]
        else:
            # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–Ω–∞—è –º–æ–¥–µ–ª—å –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ª—É—á—à—É—é Vision –º–æ–¥–µ–ª—å
            models_to_try = ["google/gemini-2.5-pro"]
    
    # –ü—Ä–æ–±—É–µ–º Vision –º–æ–¥–µ–ª–∏
    for model in models_to_try:
        if model in VISION_MODELS:
            success, result = await analyze_image_with_vision_model(image_url, prompt, model, user_id)
            if success:
                return f"üëÅÔ∏è –ê–Ω–∞–ª–∏–∑ —á–µ—Ä–µ–∑ {AVAILABLE_MODELS.get(model, model)}:\n\n{result}"
    
    # Fallback –∫ Tesseract –µ—Å–ª–∏ Vision –º–æ–¥–µ–ª–∏ –Ω–µ —Ä–∞–±–æ—Ç–∞—é—Ç
    logger.info("üîÑ Fallback –∫ Tesseract OCR...")
    return "‚ùå Vision –º–æ–¥–µ–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã. –î–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –Ω—É–∂–Ω–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –º—É–ª—å—Ç–∏–º–æ–¥–∞–ª—å–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π."



@dp.message(CommandStart())
async def send_welcome(message: types.Message):
    """Handles the /start command."""
    user_id = message.from_user.id
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ –Ω–∞ –º–∞–∫—Å–∏–º—É–º –¥–ª—è –ª—É—á—à–∏—Ö –æ—Ç–≤–µ—Ç–æ–≤)
    if user_id not in user_prefs:
        user_prefs[user_id] = {
            "show_thoughts": False,
            "preferred_model": "auto",
            "temperature": 0.3,  # –ù–∏–∑–∫–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –¥–ª—è —Ç–æ—á–Ω–æ—Å—Ç–∏
            "max_tokens": 4096   # –ú–∞–∫—Å–∏–º—É–º —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è –ø–æ–ª–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
        }
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å OCR
    tesseract_ok, tesseract_msg = check_tesseract_installation()
    
    welcome_text = "ü§ñ –ü—Ä–∏–≤–µ—Ç! –Ø —É–º–Ω—ã–π –±–æ—Ç —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –ò–ò!\n\n"
    welcome_text += "üìã –ú–æ–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:\n"
    welcome_text += "üí¨ –í–µ–¥—É –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∏–∞–ª–æ–≥–∏ (–ø–æ–º–Ω—é –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è)\n"
    welcome_text += "üëÅÔ∏è –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —á–µ—Ä–µ–∑ Vision –º–æ–¥–µ–ª–∏ AI\n"
    welcome_text += "üìÑ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –¥–æ–∫—É–º–µ–Ω—Ç—ã (PDF, DOCX, TXT)\n"
    welcome_text += f"üñºÔ∏è OCR –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {'‚úÖ AI + Tesseract' if tesseract_ok else '‚úÖ –¢–æ–ª—å–∫–æ AI Vision'}\n"
    welcome_text += "üéµ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –º–µ–¥–∏–∞—Ñ–∞–π–ª—ã\n\n"
    welcome_text += "üéØ –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —Ñ–∞–π–ª –∏–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ!\n"
    welcome_text += "üí≠ –Ø –∑–∞–ø–æ–º–Ω—é –Ω–∞—à —Ä–∞–∑–≥–æ–≤–æ—Ä –∏ –±—É–¥—É –æ—Ç–≤–µ—á–∞—Ç—å –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ!\n\n"
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â—É—é –º–æ–¥–µ–ª—å
    current_model = user_prefs[user_id]["preferred_model"]
    model_name = AVAILABLE_MODELS.get(current_model, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è")
    welcome_text += f"ü§ñ –¢–µ–∫—É—â–∞—è –º–æ–¥–µ–ª—å: {model_name}\n\n"
    
    if not tesseract_ok:
        welcome_text += f"üí° –î–ª—è OCR —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Tesseract:\n{tesseract_msg}\n\n"
    
    await message.reply(welcome_text, reply_markup=get_main_keyboard())

@dp.message(Command("think"))
async def toggle_think(message: types.Message):
    """Toggles the display of thought process (if available)."""
    user_id = message.from_user.id
    current_pref = user_prefs.get(user_id, {"show_thoughts": False})
    new_pref = not current_pref["show_thoughts"]
    user_prefs[user_id] = {"show_thoughts": new_pref}

    status = "–≤–∫–ª—é—á–µ–Ω–æ" if new_pref else "–≤—ã–∫–ª—é—á–µ–Ω–æ"
    await message.reply(f"–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏–π {status}.")



@dp.message(lambda message: message.text == "ü§ñ –í—ã–±–æ—Ä –º–æ–¥–µ–ª–∏")
async def handle_model_selection(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏"""
    user_id = message.from_user.id
    current_model = user_prefs.get(user_id, {}).get("preferred_model", "auto")
    current_name = AVAILABLE_MODELS.get(current_model, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è")
    
    model_text = f"ü§ñ **–í—ã–±–æ—Ä AI –º–æ–¥–µ–ª–∏**\n\n"
    model_text += f"–¢–µ–∫—É—â–∞—è –º–æ–¥–µ–ª—å: {current_name}\n\n"
    model_text += "–î–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏:\n"
    for model_id, model_name in AVAILABLE_MODELS.items():
        status = "‚úÖ" if model_id == current_model else "‚ö™"
        model_text += f"{status} {model_name}\n"
    
    model_text += "\n–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å:"
    
    await message.reply(model_text, reply_markup=get_model_keyboard())

@dp.message(lambda message: message.text == "üìä –°—Ç–∞—Ç—É—Å")
async def handle_status(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ —Å—Ç–∞—Ç—É—Å–∞"""
    tesseract_ok, tesseract_msg = check_tesseract_installation()
    
    status_text = "üìä **–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã**\n\n"
    status_text += f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞: –î–æ—Å—Ç—É–ø–Ω–∞\n"
    status_text += f"{'‚úÖ' if PDF_AVAILABLE else '‚ùå'} –ê–Ω–∞–ª–∏–∑ PDF: {'–î–æ—Å—Ç—É–ø–µ–Ω' if PDF_AVAILABLE else '–ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω'}\n"
    status_text += f"{'‚úÖ' if DOCX_AVAILABLE else '‚ùå'} –ê–Ω–∞–ª–∏–∑ DOCX: {'–î–æ—Å—Ç—É–ø–µ–Ω' if DOCX_AVAILABLE else '–ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω'}\n"
    status_text += f"{'‚úÖ' if tesseract_ok else '‚ùå'} OCR –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {'–î–æ—Å—Ç—É–ø–µ–Ω' if tesseract_ok else '–ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω'}\n"
    status_text += f"‚ö° –í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞: ~1.89 —Å–µ–∫\n"
    status_text += f"üß† –ö—ç—à —Ñ–∞–π–ª–æ–≤: {len(_file_cache)} –∑–∞–ø–∏—Å–µ–π\n"
    
    await message.reply(status_text, reply_markup=get_main_keyboard())

@dp.message(lambda message: message.text == "‚ÑπÔ∏è –ü–æ–º–æ—â—å")
async def handle_help(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ø–æ–º–æ—â–∏"""
    help_text = "‚ÑπÔ∏è **–°–ø—Ä–∞–≤–∫–∞ –ø–æ –±–æ—Ç—É**\n\n"
    help_text += "üéØ **–û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:**\n"
    help_text += "‚Ä¢ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ò–ò\n"
    help_text += "‚Ä¢ –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª (PDF, DOCX, TXT, –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ)\n"
    help_text += "‚Ä¢ –ê–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —á–µ—Ä–µ–∑ Vision –º–æ–¥–µ–ª–∏ AI\n"
    help_text += "‚Ä¢ –í–µ–¥–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∏–∞–ª–æ–≥–∏ - –±–æ—Ç –ø–æ–º–Ω–∏—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç!\n\n"
    help_text += "üëÅÔ∏è **–ê–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π:**\n"
    help_text += "‚Ä¢ AI Vision –∞–Ω–∞–ª–∏–∑ —á–µ—Ä–µ–∑ –º—É–ª—å—Ç–∏–º–æ–¥–∞–ª—å–Ω—ã–µ –º–æ–¥–µ–ª–∏\n"
    help_text += "‚Ä¢ –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∏ –æ–ø–∏—Å–∞–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ\n"
    help_text += "‚Ä¢ Fallback –∫ Tesseract OCR –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏\n"
    help_text += "‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –≤ Gemini 2.5 Pro, Claude Sonnet 4, GPT-OSS-120B\n\n"
    help_text += "ü§ñ **AI –º–æ–¥–µ–ª–∏:**\n"
    help_text += "‚Ä¢ GPT-OSS-120B/20B - –Ω–æ–≤—ã–µ –º–æ–¥–µ–ª–∏ OpenAI\n"
    help_text += "‚Ä¢ DeepSeek R1 - –±–µ—Å–ø–ª–∞—Ç–Ω–∞—è –º–æ–¥–µ–ª—å —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏–π\n"
    help_text += "‚Ä¢ Qwen3-235B - –º–æ—â–Ω–∞—è –±–µ—Å–ø–ª–∞—Ç–Ω–∞—è –º–æ–¥–µ–ª—å\n"
    help_text += "‚Ä¢ Qwen Coder - —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞ –∫–æ–¥–µ\n"
    help_text += "‚Ä¢ Kimi K2, Claude Sonnet 4, Gemini 2.5 Pro\n\n"
    help_text += "üí≠ **–ü–∞–º—è—Ç—å –¥–∏–∞–ª–æ–≥–∞:**\n"
    help_text += f"‚Ä¢ –°–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –¥–æ {MAX_CHAT_HISTORY} —Å–æ–æ–±—â–µ–Ω–∏–π\n"
    help_text += f"‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º (~{MAX_CONTEXT_TOKENS} —Ç–æ–∫–µ–Ω–æ–≤)\n"
    help_text += "‚Ä¢ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –¥–∏–∞–ª–æ–≥–∞\n\n"
    help_text += "üìù **–ö–æ–º–∞–Ω–¥—ã:**\n"
    help_text += "/start - –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞\n"
    help_text += "/think - –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —Ä–µ–∂–∏–º —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏–π\n\n"
    help_text += "üîÑ **–õ–∏–º–∏—Ç—ã:**\n"
    help_text += "‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: 20 MB\n"
    help_text += "‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü PDF: 50\n"
    
    await message.reply(help_text, reply_markup=get_main_keyboard())

@dp.message(lambda message: message.text == "üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å —á–∞—Ç")
async def handle_clear_chat(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –æ—á–∏—Å—Ç–∫–∏ —á–∞—Ç–∞"""
    user_id = message.from_user.id
    clear_chat_history(user_id)
    await message.reply("‚ú® –ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞ –æ—á–∏—â–µ–Ω–∞! –ì–æ—Ç–æ–≤ –∫ –Ω–æ–≤–æ–º—É —Ä–∞–∑–≥–æ–≤–æ—Ä—É!", reply_markup=get_main_keyboard())

@dp.message(lambda message: message.text == "üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é")
async def handle_clear_history(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –æ—á–∏—Å—Ç–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏"""
    user_id = message.from_user.id
    history_count = len(user_chat_history.get(user_id, []))
    clear_chat_history(user_id)
    await message.reply(f"‚ú® –ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞ –æ—á–∏—â–µ–Ω–∞! –£–¥–∞–ª–µ–Ω–æ {history_count} —Å–æ–æ–±—â–µ–Ω–∏–π.", reply_markup=get_main_keyboard())

@dp.message(lambda message: message.text == "üí≠ –ü–∞–º—è—Ç—å –¥–∏–∞–ª–æ–≥–∞")
async def handle_memory_status(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø–∞–º—è—Ç–∏ –¥–∏–∞–ª–æ–≥–∞"""
    user_id = message.from_user.id
    history = user_chat_history.get(user_id, [])
    
    if not history:
        status_text = "üí≠ **–ü–∞–º—è—Ç—å –¥–∏–∞–ª–æ–≥–∞**\n\n"
        status_text += "üìù –ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞ - —ç—Ç–æ –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ!\n"
        status_text += f"üìä –õ–∏–º–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–π: {MAX_CHAT_HISTORY}\n"
        status_text += f"üéØ –õ–∏–º–∏—Ç —Ç–æ–∫–µ–Ω–æ–≤: {MAX_CONTEXT_TOKENS}\n\n"
        status_text += "‚ÑπÔ∏è –ë–æ—Ç —Ç–µ–ø–µ—Ä—å –∑–∞–ø–æ–º–∏–Ω–∞–µ—Ç –≤–∞—à–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –≤–µ–¥–µ—Ç –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω—ã–π –¥–∏–∞–ª–æ–≥!"
    else:
        total_tokens = sum(estimate_tokens(msg["content"]) for msg in history)
        user_msgs = len([msg for msg in history if msg["role"] == "user"])
        ai_msgs = len([msg for msg in history if msg["role"] == "assistant"])
        
        status_text = "üí≠ **–ü–∞–º—è—Ç—å –¥–∏–∞–ª–æ–≥–∞**\n\n"
        status_text += f"üìù –°–æ–æ–±—â–µ–Ω–∏–π –≤ –∏—Å—Ç–æ—Ä–∏–∏: {len(history)}\n"
        status_text += f"üë§ –í–∞—à–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: {user_msgs}\n"
        status_text += f"ü§ñ –û—Ç–≤–µ—Ç–æ–≤ –ò–ò: {ai_msgs}\n"
        status_text += f"üìä –ü—Ä–∏–º–µ—Ä–Ω–æ —Ç–æ–∫–µ–Ω–æ–≤: {total_tokens}/{MAX_CONTEXT_TOKENS}\n"
        status_text += f"üéØ –õ–∏–º–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–π: {MAX_CHAT_HISTORY}\n\n"
        
        if total_tokens > MAX_CONTEXT_TOKENS * 0.8:
            status_text += "‚ö†Ô∏è –ö–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ—á—Ç–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω - —Å—Ç–∞—Ä—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –±—É–¥—É—Ç —É–¥–∞–ª—è—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏"
        else:
            status_text += "‚úÖ –ü–∞–º—è—Ç—å —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ"
    
    await message.reply(status_text, reply_markup=get_main_keyboard())

@dp.message(lambda message: message.text == "üîô –ù–∞–∑–∞–¥")
async def handle_back(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –Ω–∞–∑–∞–¥"""
    await message.reply("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=get_main_keyboard())

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏
@dp.message(lambda message: message.text in AVAILABLE_MODELS.values())
async def handle_model_change(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –º–æ–¥–µ–ª–∏"""
    user_id = message.from_user.id
    
    # –ù–∞—Ö–æ–¥–∏–º ID –º–æ–¥–µ–ª–∏ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
    selected_model = None
    for model_id, model_name in AVAILABLE_MODELS.items():
        if message.text == model_name:
            selected_model = model_id
            break
    
    if selected_model:
        if user_id not in user_prefs:
            user_prefs[user_id] = {}
        user_prefs[user_id]["preferred_model"] = selected_model
        
        await message.reply(
            f"‚úÖ –ú–æ–¥–µ–ª—å –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞: {message.text}", 
            reply_markup=get_main_keyboard()
        )
    else:
        await message.reply("‚ùå –û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏", reply_markup=get_main_keyboard())



@dp.message(lambda message: message.document or message.photo or message.voice or message.video or message.audio)
async def handle_file(message: types.Message):
    """Handles incoming file messages"""
    user_id = message.from_user.id
    file_info = None
    file_type = "unknown"
    file_name = "unknown"

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ñ–∞–π–ª–∞
    if message.document:
        file_info = message.document
        file_type = "document"
        file_name = file_info.file_name or "document"
    elif message.photo:
        file_info = message.photo[-1]  # –ë–µ—Ä–µ–º —Ñ–æ—Ç–æ –Ω–∞–∏–±–æ–ª—å—à–µ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
        file_type = "photo"
        file_name = f"photo_{file_info.file_id}.jpg"
    elif message.voice:
        file_info = message.voice
        file_type = "voice"
        file_name = f"voice_{file_info.file_id}.ogg"
    elif message.video:
        file_info = message.video
        file_type = "video"
        file_name = file_info.file_name or f"video_{file_info.file_id}.mp4"
    elif message.audio:
        file_info = message.audio
        file_type = "audio"
        file_name = file_info.file_name or f"audio_{file_info.file_id}.mp3"

    if not file_info:
        await message.reply("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ.")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
    file_size_mb = file_info.file_size / (1024 * 1024) if hasattr(file_info, 'file_size') and file_info.file_size else 0
    if file_size_mb > MAX_FILE_SIZE_MB:
        await message.reply(f"‚ùå –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π ({file_size_mb:.1f} MB). –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: {MAX_FILE_SIZE_MB} MB")
        return

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏
    processing_message = await message.reply("üì• –ü–æ–ª—É—á–∞—é —Ñ–∞–π–ª...")

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π –ø—É—Ç—å –¥–ª—è —Ñ–∞–π–ª–∞
    local_file_path = DOWNLOADS_DIR / f"{file_info.file_id}_{file_name}"
    
    # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
    await bot.edit_message_text("üíæ –°–∫–∞—á–∏–≤–∞—é —Ñ–∞–π–ª...", 
                               chat_id=processing_message.chat.id, 
                               message_id=processing_message.message_id)

    download_success = await download_file(file_info.file_id, str(local_file_path))
    
    if not download_success:
        await bot.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞.", 
                                   chat_id=processing_message.chat.id, 
                                   message_id=processing_message.message_id)
        return

    await bot.edit_message_text("üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞...", 
                               chat_id=processing_message.chat.id, 
                               message_id=processing_message.message_id)

    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
    file_content = ""
    file_extension = os.path.splitext(file_name)[1].lower() if '.' in file_name else ""

    try:
        local_file_str = str(local_file_path)
        if file_type == "photo":
            # –ü–æ–ª—É—á–∞–µ–º URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è Vision –∞–Ω–∞–ª–∏–∑–∞
            file_url = f"https://api.telegram.org/file/bot{TELEGRAM_BOT_TOKEN}/{(await bot.get_file(file_info.file_id)).file_path}"
            
            # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º Vision –º–æ–¥–µ–ª–∏, –∑–∞—Ç–µ–º Tesseract –∫–∞–∫ fallback
            await bot.edit_message_text("üëÅÔ∏è –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —á–µ—Ä–µ–∑ AI Vision...", 
                                       chat_id=processing_message.chat.id, 
                                       message_id=processing_message.message_id)
            
            file_content = await enhanced_image_analysis(file_url, user_id)
            
            # –ï—Å–ª–∏ Vision –º–æ–¥–µ–ª–∏ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∏, –ø—Ä–æ–±—É–µ–º Tesseract
            if "‚ùå Vision –º–æ–¥–µ–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã" in file_content:
                await bot.edit_message_text("üîÑ Fallback –∫ Tesseract OCR...", 
                                           chat_id=processing_message.chat.id, 
                                           message_id=processing_message.message_id)
                tesseract_result = await extract_text_from_image(local_file_str)
                if tesseract_result and "‚ùå" not in tesseract_result:
                    file_content = f"üîç Tesseract OCR:\n\n{tesseract_result}"
        elif file_extension == ".pdf":
            file_content = await extract_text_from_pdf(local_file_str)
        elif file_extension == ".docx":
            file_content = await extract_text_from_docx(local_file_str)
        elif file_extension == ".txt":
            file_content = await extract_text_from_txt(local_file_str)
        elif file_type == "document":
            # –î–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –±–µ–∑ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–æ–≥–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
            file_size_mb = file_info.file_size / (1024 * 1024) if hasattr(file_info, 'file_size') and file_info.file_size else 0
            file_content = f"üìÑ –î–æ–∫—É–º–µ–Ω—Ç: {file_name}\nüìè –†–∞–∑–º–µ—Ä: {file_size_mb:.2f} MB\n\n‚ùå –§–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.\n\n–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:\n‚Ä¢ PDF (.pdf)\n‚Ä¢ Word (.docx)\n‚Ä¢ –¢–µ–∫—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã (.txt)\n‚Ä¢ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (JPG, PNG, etc.)"
        elif file_type in ["voice", "video", "audio"]:
            file_size_mb = file_info.file_size / (1024 * 1024) if hasattr(file_info, 'file_size') and file_info.file_size else 0
            file_content = f"üéµ –ú–µ–¥–∏–∞—Ñ–∞–π–ª: {file_name}\nüìè –†–∞–∑–º–µ—Ä: {file_size_mb:.2f} MB\n\n‚ùå –ê–Ω–∞–ª–∏–∑ –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤ –ø–æ–∫–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è."
        else:
            file_content = "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞. –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è: PDF, DOCX, TXT, –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è."
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Ñ–∞–π–ª–∞: {e}")
        file_content = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Ñ–∞–π–ª–∞: {e}"

    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å –∫ LLM
    prompt = f"""–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏–ª —Ñ–∞–π–ª —Ç–∏–ø–∞ '{file_type}' —Å –∏–º–µ–Ω–µ–º '{file_name}'.
–°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞:
{file_content}

–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —ç—Ç–æ—Ç —Ñ–∞–π–ª –∏ –¥–∞–π —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç:
1. üìã –¢–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞ –∏ –æ—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
2. üìÑ –ö–ª—é—á–µ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ (–¥–∞—Ç—ã, –Ω–æ–º–µ—Ä–∞, –≤–∞–∂–Ω—ã–µ —Ñ–∞–∫—Ç—ã)
3. üí° –ö—Ä–∞—Ç–∫–æ–µ —Ä–µ–∑—é–º–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è
4. üéØ –û—Å–Ω–æ–≤–Ω—ã–µ –≤—ã–≤–æ–¥—ã –∏–ª–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏

–û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ, –Ω–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ."""

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ LLM
    response_text = await invoke_llm_api(prompt, user_id)

    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ—Ü–µ—Å—Å–µ
    try:
        await bot.delete_message(chat_id=processing_message.chat.id, message_id=processing_message.message_id)
    except Exception as e:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ—Ü–µ—Å—Å–µ: {e}")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    if response_text:
        show_thoughts = user_prefs.get(user_id, {}).get("show_thoughts", False)
        if not show_thoughts:
            response_text = re.sub(r'<think>.*?</think>\s*', '', response_text, flags=re.DOTALL | re.IGNORECASE).strip()

        if not response_text:
            await message.reply("–û—Ç–≤–µ—Ç —Å–æ–¥–µ—Ä–∂–∞–ª —Ç–æ–ª—å–∫–æ —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ —Å–∫—Ä—ã—Ç—ã.")
            return

        # –†–∞–∑–±–∏–≤–∞–µ–º –¥–ª–∏–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        for i in range(0, len(response_text), 4096):
            await message.reply(response_text[i:i+4096])
    else:
        await message.reply("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç.")

@dp.message()
async def handle_message(message: types.Message):
    """Handles incoming text messages and replies using the LLM API."""
    if not message.text:
        return

    user_id = message.from_user.id
    show_thoughts = user_prefs.get(user_id, {}).get("show_thoughts", False)

    # –û–±—ã—á–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    processing_message = await message.reply("ü§ñ –î—É–º–∞—é...")

    response_text = await invoke_llm_api(message.text, user_id)

    try:
        await bot.delete_message(chat_id=processing_message.chat.id, message_id=processing_message.message_id)
    except Exception as e:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ—Ü–µ—Å—Å–µ: {e}")

    if response_text:
        if not show_thoughts:
            response_text = re.sub(r'<think>.*?</think>\s*', '', response_text, flags=re.DOTALL | re.IGNORECASE).strip()

        if not response_text:
            await message.reply("–û—Ç–≤–µ—Ç —Å–æ–¥–µ—Ä–∂–∞–ª —Ç–æ–ª—å–∫–æ —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ —Å–∫—Ä—ã—Ç—ã.")
            return

        # –†–∞–∑–±–∏–≤–∞–µ–º –¥–ª–∏–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        for i in range(0, len(response_text), 4096):
            await message.reply(response_text[i:i+4096])
    else:
        await message.reply("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç.")

async def cleanup_old_files():
    """–û—á–∏—â–∞–µ—Ç —Å—Ç–∞—Ä—ã–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã"""
    try:
        import time
        current_time = time.time()
        max_age = 3600  # 1 —á–∞—Å
        
        if DOWNLOADS_DIR.exists():
            for file_path in DOWNLOADS_DIR.iterdir():
                if file_path.is_file():
                    file_age = current_time - file_path.stat().st_mtime
                    if file_age > max_age:
                        try:
                            file_path.unlink()
                            logger.debug(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω —Å—Ç–∞—Ä—ã–π —Ñ–∞–π–ª: {file_path.name}")
                        except Exception as e:
                            logger.debug(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª {file_path}: {e}")
    except Exception as e:
        logger.warning(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Ñ–∞–π–ª–æ–≤: {e}")

async def main():
    """Starts the bot."""
    if not TELEGRAM_BOT_TOKEN or not OPENROUTER_API_KEY:
        logger.error("–¢–æ–∫–µ–Ω—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ TELEGRAM_BOT_TOKEN –∏ OPENROUTER_API_KEY —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã.")
        return
    
    logger.info("üöÄ –ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    
    # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ —Ñ–∞–π–ª—ã –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
    await cleanup_old_files()
    
    try:
        await dp.start_polling(bot)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
    finally:
        # –û—á–∏—â–∞–µ–º —Ñ–∞–π–ª—ã –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
        await cleanup_old_files()

async def startup_checks() -> bool:
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ"""
    logger.info("=" * 60)
    logger.info("ü§ñ TELEGRAM AI BOT - –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø")
    logger.info("=" * 60)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –ø–∞–∫–µ—Ç—ã
    logger.info("üì¶ –ü—Ä–æ–≤–µ—Ä–∫–∞ Python –ø–∞–∫–µ—Ç–æ–≤...")
    if not await install_missing_packages():
        logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–∞–∫–µ—Ç—ã")
        return False
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º Tesseract
    tesseract_ok = setup_tesseract_auto()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω—ã
    logger.info("üîë –ü—Ä–æ–≤–µ—Ä–∫–∞ API —Ç–æ–∫–µ–Ω–æ–≤...")
    if TELEGRAM_BOT_TOKEN and OPENROUTER_API_KEY:
        logger.info("‚úÖ –¢–æ–∫–µ–Ω—ã –Ω–∞–π–¥–µ–Ω—ã")
    else:
        logger.error("‚ùå –¢–æ–∫–µ–Ω—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return False
    
    logger.info("=" * 60)
    logger.info("üìä –°–¢–ê–¢–£–° –§–£–ù–ö–¶–ò–ô:")
    logger.info("‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞: –î–æ—Å—Ç—É–ø–Ω–∞")
    logger.info(f"{'‚úÖ' if PDF_AVAILABLE else '‚ö†Ô∏è'} –ê–Ω–∞–ª–∏–∑ PDF: {'–î–æ—Å—Ç—É–ø–µ–Ω' if PDF_AVAILABLE else '–ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω'}")
    logger.info(f"{'‚úÖ' if DOCX_AVAILABLE else '‚ö†Ô∏è'} –ê–Ω–∞–ª–∏–∑ DOCX: {'–î–æ—Å—Ç—É–ø–µ–Ω' if DOCX_AVAILABLE else '–ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω'}")
    logger.info(f"{'‚úÖ' if tesseract_ok else '‚ö†Ô∏è'} OCR –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {'–î–æ—Å—Ç—É–ø–µ–Ω' if tesseract_ok else '–ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω'}")
    logger.info("=" * 60)
    
    if not tesseract_ok:
        logger.info("üí° –î–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è OCR —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Tesseract:")
        logger.info("   Windows: https://github.com/UB-Mannheim/tesseract/wiki")
        logger.info("   Linux: sudo apt-get install tesseract-ocr")
        logger.info("   macOS: brew install tesseract")
        logger.info("=" * 60)
    
    return True

async def main_wrapper():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è-–æ–±–µ—Ä—Ç–∫–∞"""
    try:
        # –í—ã–ø–æ–ª–Ω—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
        if not await startup_checks():
            logger.error("‚ùå –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å")
            return False
        
        logger.info("üéâ –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
        await main()
        return True
    except KeyboardInterrupt:
        logger.info("\nüëã –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        return True
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        return False

if __name__ == '__main__':
    try:
        success = asyncio.run(main_wrapper())
        if not success:
            input("–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –≤—ã—Ö–æ–¥–∞...")
            sys.exit(1)
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e}")
        input("–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –≤—ã—Ö–æ–¥–∞...")
        sys.exit(1)